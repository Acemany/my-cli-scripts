#!/usr/bin/env python3

from collections.abc import Callable, Generator, Iterable
from asyncio import run as aiorun, sleep
from aiohttp import ClientSession
from aiogram.filters import Command
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from dotenv import dotenv_values
from pathlib import Path
from typing import Any


bot_root: Path = Path(__file__).parent


def видвал_сраки(handler: Callable[..., Any]) -> Callable[..., Any]:
    async def wrapped(message: Message) -> Any:
        try:
            return await handler(message)
        except Exception as e:
            await message.reply("Сталася критична помилка:\nВидвал сраки")
            raise e

    return wrapped


async def get(url: str) -> dict[str, object]:
    async with ClientSession() as s:
        return await (await s.get(url)).json()


def separate_every(a: str, b: float) -> Generator[str, None, None]:
    if b == 0:
        raise ValueError('Separate by every 0 symbols?')
    return (a[b*i:b*(i+1)]
            for i in range(int(1+(len(a)-1)/b)))


secrets: dict[str, str] = dotenv_values(bot_root/".env")  # type: ignore

TOKEN: str = secrets["BOT_TOKEN"]
bot: Bot = Bot(token=TOKEN)
dp: Dispatcher = Dispatcher()


@dp.message(Command('start'))
async def start(message: Message):
    await message.reply('Привет! я жалкая копия бота червяка',
                        parse_mode='markdown')


@dp.message(Command('help'))
async def help(message: Message):
    await message.reply("/cat - Случайное фото котэм\n"
                  "/catgif - Случайная гифка с котэм\n"
                  "/dog - Случайное фото пёсика\n"
                  "/fox - Случайное фото лисы\n"
                  "/neko - Случайное фото кошкодевочки\n"
                  "/girl - Случайное фото оняме девочки\n"
                  "/help - Этот список")


@dp.message(Command("cat"))
@видвал_сраки
async def cat(m: Message):
    url = (await get("https://api.thecatapi.com/v1/images/search"))[0]["url"]
    try:
        await m.reply_photo(url)
    except Exception as e:
        print(url)
        raise e


@dp.message(Command("catgif"))
@видвал_сраки
async def catgif(m: Message):
    url: str = f"https://cataas.com/cat/{(await get("http://cataas.com/cat/gif?json=true"))['_id']}.gif"
    try:
        await m.reply_animation(url)
    except Exception as e:
        print(url)
        raise e


@dp.message(Command("dog"))
@видвал_сраки
async def dog(m: Message):
    url = (await get("https://api.thedogapi.com/v1/images/search"))[0]["url"]
    try:
        await m.reply_photo(url)
    except Exception as e:
        print(url)
        raise e


@dp.message(Command("fox"))
@видвал_сраки
async def fox(m: Message):
    url = (await get("https://randomfox.ca/floof"))["image"]
    try:
        await m.reply_photo(url)
    except Exception as e:
        print(url)
        raise e


@dp.message(Command("neko"))
@видвал_сраки
async def neko(m: Message):
    url = (await get("https://nekos.best/api/v2/neko/"))["results"][0]["url"]
    try:
        await m.reply_photo(url)
    except Exception as e:
        print(url)
        raise e


@dp.message(Command("girl"))
@видвал_сраки
async def girl(m: Message):
    url = (await get("https://api.nekosapi.com/v3/images/random?rating=safe"))["items"][0]["image_url"]
    try:
        await m.reply_photo(url)
    except Exception as e:
        print(url)
        raise e


# @dp.message(Command("girlX"))
# @видвал_сраки
"https://api.nekosapi.com/v3/images/random?rating=explicit"


aiorun(dp.start_polling(bot))  # type: ignore
